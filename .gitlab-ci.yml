default:
  image: maven:3.8.3-eclipse-temurin-17

cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - /builds/${CI_PROJECT_PATH}/.m2/

variables:
  env: "qa"
  app_name: "freo-grow"                               # Replace with the application name / repo name
  CODEARTIFACT_AUTH_TOKEN: ""
  CI_AWS_ECS_CLUSTER: mt-mumbai-${env}-fargate01
  CI_AWS_ECS_SERVICE: freo-${env}-${app_name}-app-backend
  CI_AWS_ECS_TASK_FAMILY_NAME: ${app_name}-deployment-task


  commit_branch: ${CI_COMMIT_BRANCH}
  ECR_REPO_URL: ${AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/${app_name}
  TEMP_TASK_FILE: tmp-task-definition.json
  AWS_DEFAULT_REGION: "ap-south-1"
  TEMP_DEPLOYMENT_FILE: temp-deployment.json
  SERVICE_RESTART_TIME: 24
  TASK_DEFINITION_FILE: task-definition-dev.json

  CONFIG_LABEL: development
  CONFIG_SERVER_USERNAME: ${app_name}-${env}
  NEW_RELIC_AGENT_ENABLED: "false"


  SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL_PRODUCTION_IN}
  DEPLOY_TOKEN: ${FREOBANK_DEPLOY_TOKEN}
  GIT_SSL_NO_VERIFY: "true"
  app_jar: "${app_name}.jar"                          # No Change Required
  backup_service_jar: "${app_name}_${commit_branch}-${CI_PIPELINE_ID}.jar_bak"                 # No Change Required
  service_systemctl: "${app_name}.service"            # Replace with the service systemctl file
  new_service_jar: "${app_name}_${commit_branch}-${CI_COMMIT_SHORT_SHA}-${CI_JOB_ID}.jar" # No Change Required
  service_deployment_path: "/opt/apps/appuser/${app_name}/" # Replace with the service deployment path e.g. /opt/apps/moneytap/rest/
  user: "appuser"                                    # Replace with the app system user e.g. moneytap, datasci, finflux, appuser
  MAVEN_OPTS: "-Dmaven.repo.local=/builds/${CI_PROJECT_PATH}/.m2"
  MAVEN_CLI_OPTS: "-T 2C --batch-mode --errors --fail-at-end --show-version"
  JAVA_TOOL_OPTIONS: "-Xmx2048m -Xms1024m  -XX:+UseContainerSupport"
  port: "9027"

stages:
  - generate-sts-token
  - mvn-package
  - build-and-upload-image
  - deploy

generate-token:
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  stage: generate-sts-token
  script:
    - echo ${AWS_DEV_GITLABCICD_ACCESS_KEY}
    - aws configure --profile codeartifact_user set aws_access_key_id ${AWS_DEV_GITLABCICD_ACCESS_KEY}
    - aws configure --profile codeartifact_user set aws_secret_access_key ${AWS_DEV_GITLABCICD_SECRET_KEY}
    - aws codeartifact get-authorization-token --domain freo-money --query authorizationToken --output text --profile codeartifact_user > code_artifact_token.txt
  rules:
    - if : ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "candidate" || $CI_COMMIT_BRANCH == "development")
  artifacts:
    paths:
      - code_artifact_token.txt
  tags:
    - ${CI_DEV_RUNNER_TAG}

mvn-package:
  stage: mvn-package
  rules:
    - if: $CI_COMMIT_BRANCH == "development"
      variables:
        env: "dev"
    - if: $CI_COMMIT_BRANCH == "master"
      variables:
        env: "prod"
  script:
#    - rm -rf /builds/${CI_PROJECT_PATH}/freo-common
#    - git clone https://freobank_deploy_token:${DEPLOY_TOKEN}@git.moneytap.com/mt/be/casa/freo-common.git --depth 1 -b ${commit_branch}
#    - cd freo-common
#    - mvn clean install -DskipTests $MAVEN_CLI_OPTS
#    - cd /builds/${CI_PROJECT_PATH}
#    - mvn clean install $MAVEN_CLI_OPTS -am

    - CODEARTIFACT_AUTH_TOKEN=$(cat code_artifact_token.txt)
    - sed  "s/P_CODEARTIFACT_AUTH_TOKEN/$CODEARTIFACT_AUTH_TOKEN/g" $MVN_SETTINGS_XML > ~/.m2/customSettings.xml
    - mvn clean install -DskipTests -X -s ~/.m2/customSettings.xml
  artifacts:
    paths:
      - target/${app_jar}

  tags:
    - ${CI_DEV_RUNNER_TAG}




build-docker-image:
  stage: build-and-upload-image
  rules:
    - if: $CI_COMMIT_BRANCH == "development"
      variables:
        env: "dev"
    - if: $CI_COMMIT_BRANCH == "master"
      variables:
        env: "prod"
  image:
    name: amazon/aws-cli:2.11.18
    entrypoint: ["/bin/sh", "-c"]
  services:
    - docker:stable-dind
  before_script:
    - amazon-linux-extras install docker

  script:
    - mkdir ~/.aws/
    - touch ~/.aws/credentials
    - printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\nregion = %s\n" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" "$AWS_DEFAULT_REGION" >> ~/.aws/credentials
    - cd /builds/${CI_PROJECT_PATH}/
    - cat ~/.aws/credentials
    - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com
    - aws s3 cp s3://freomoney-signoz-logs/opentelemetry-javaagent.jar .
    - docker build -t ${app_name}-${env}:${CI_COMMIT_SHA} --build-arg env=${env} --build-arg app_name=${app_name}   .
    - docker tag ${app_name}-${env}:${CI_COMMIT_SHA} ${ECR_REPO_URL}:${env}-${CI_COMMIT_SHA}
    - docker push ${ECR_REPO_URL}:${env}-${CI_COMMIT_SHA}
  tags:
    - ${CI_DEV_RUNNER_TAG}


deploy:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-ecs:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "development"
      variables:
        env: "dev"
        TASK_DEFINITION_FILE: task-definition-dev.json
    - if: $CI_COMMIT_BRANCH == "master"
      variables:
        env: "prod"
        CONFIG_LABEL: master
        TASK_DEFINITION_FILE: task-definition-prod.json

  script:
    - echo ${TASK_DEFINITION_FILE}
    - var="${ECR_REPO_URL}:${env}-${CI_COMMIT_SHA}"
    - var=$(sed 's/\//\\\//g' <<< "$var")
    - sed "s/PLACEHOLDER_IMAGE/${var}/g" /builds/${CI_PROJECT_PATH}/${TASK_DEFINITION_FILE} > ${TEMP_TASK_FILE}
    - sed -i "s/PLACEHOLDER_CI_AWS_ECS_TASK_FAMILY_NAME/${CI_AWS_ECS_TASK_FAMILY_NAME}/g" ${TEMP_TASK_FILE}
    - sed -i "s/P_ACCOUNT_ID/${AWS_ACCOUNT_ID}/g" ${TEMP_TASK_FILE}
    # - sed -i "s/P_CONFIG_LABEL/${CONFIG_LABEL}/g" ${TEMP_TASK_FILE}
    - sed -i "s/P_ENV/${env}/g" ${TEMP_TASK_FILE}
    # - sed -i "s/P_CONFIG_SERVER_USERNAME/${CONFIG_SERVER_USERNAME}/g" ${TEMP_TASK_FILE}
    - sed -i "s/P_APP/${app_name}/g" ${TEMP_TASK_FILE}
    - sed -i "s/P_NEW_RELIC_AGENT/${NEW_RELIC_AGENT_ENABLED}/g" ${TEMP_TASK_FILE}
    - TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://${TEMP_TASK_FILE} | egrep "taskDefinitionArn" | awk -F '"' '{print $4}')
    - echo ${CI_AWS_ECS_CLUSTER}
    - echo ${CI_AWS_ECS_SERVICE}
    - temp=$(aws ecs update-service --cluster ${CI_AWS_ECS_CLUSTER} --service ${CI_AWS_ECS_SERVICE} --task-definition $TASK_ARN)
    - echo $temp >> ${TEMP_DEPLOYMENT_FILE}
    - . /builds/${CI_PROJECT_PATH}/shell_functions.sh && check_deployment_status ${SERVICE_RESTART_TIME} ${TEMP_DEPLOYMENT_FILE} ${CI_AWS_ECS_CLUSTER} ${CI_AWS_ECS_SERVICE} ${AWS_DEFAULT_REGION} ${SLACK_WEBHOOK_URL} ${CI_COMMIT_BRANCH} "${CI_COMMIT_AUTHOR}" ${TASK_ARN}
  tags:
    - ${CI_DEV_RUNNER_TAG}
  interruptible: false

